name: Release Droid - Upload GitHub Release Assets

on:
  workflow_dispatch:
    inputs:
      upload_url:
        description: 'Upload URL'
        required: true

jobs:
  build-binaries:
    runs-on: ${{ matrix.config.os }}
    name: Build binaries on ${{ matrix.config.os }}, R=${{ matrix.confg.r }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, r: '4.2.1' , r_tools: "42" }
          - { os: macOS-latest, r: '4.2.1' , r_tools: "42" }
          - { os: ubuntu-latest, r: '4.2.1' , r_tools: "42" }
          - { os: windows-latest, r: '4.1.3' , r_tools: "40" }
          - { os: macOS-latest, r: '4.1.3' , r_tools: "40" }
          - { os: ubuntu-latest, r: '4.2.1' , r_tools: "42" }

    environment: ci_build
    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          rtools-version: ${{ matrix.config.r_tools }}

      - name: Install openssl MacOsX
        if: matrix.config.os == 'macOS-latest'
        run: |
          brew install openssl
          brew install coreutils
      - name: Install Ubuntu package dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
            sudo apt-get -y update && \
               sudo apt-get -y install --no-install-recommends libcurl4-openssl-dev curl libxml2-dev libssl-dev && \
               sudo locale-gen en_US.UTF-8 && \
               sudo update-locale LC_ALL=en_US.UTF-8 && \
               sudo apt-get -y clean && \
               sudo apt-get -y autoremove
      - name: Query dependencies
        run: |
          install.packages("RODBC")
          install.packages("DBI")
          install.packages("devtools", dependencies=TRUE)
          devtools::install_deps()
        shell: Rscript {0}
        env: # Set individual GH PAT
          GITHUB_PAT: ${{ secrets.PAT_FOR_DEVTOOLS }}
      - name: Create output dir
        run: |
            out_put_dir="${{ runner.temp }}/bin/${{ matrix.config.os }}"
            out_put_dir=$(echo "$out_put_dir" | sed  -e 's/\\/\//g') #Needed on Windows
            mkdir -p "${out_put_dir}"
            echo "output_dir=${out_put_dir}" >> $GITHUB_ENV
        shell: bash
      - name: Build
        run: |
          devtools::build(binary=TRUE, path='${{ env.output_dir }}')
        shell: Rscript {0}
        env: # Set individual GH PAT
          GITHUB_PAT: ${{ secrets.PAT_FOR_DEVTOOLS }}
      - name: Rename MacOsX package
        if: matrix.config.os == 'macOS-latest'
        run: |
          pushd '${{ env.output_dir }}'
          ls .
          for f in *.tgz; do mv "$f" "$(echo "$f" | sed s/\.tgz/-${{matrix.config.os}}-r${{matrix.config.r}}\.tgz/)"; done
          ls .
        shell: bash
      - name: Rename Ubuntu package
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          pushd '${{ env.output_dir }}'
          ls .
          for f in *.tar.gz; do mv "$f" "$(echo "$f" | sed s/\.tar.gz/-r${{matrix.config.r}}\.tar.gz/)"; done
          ls .
        shell: bash
      - name: Rename windows package
        if: matrix.config.os == 'windows-latest'
        run: |
          pushd '${{ env.output_dir }}'
          ls .
          for f in *.zip; do mv "$f" "$(echo "$f" | sed s/\.zip/-${{matrix.config.os}}-r${{matrix.config.r}}\.zip/)"; done
          ls .
        shell: bash
      - name: Generate sha256sum files
        run: find '${{ env.output_dir }}' -maxdepth 1 -type f -exec bash -c 'sha256sum {} > {}.sha256' \;
        shell: bash
      - name: Check result
        run: |
          echo 'Target folder is ${{ env.output_dir }}'
          ls -la '${{ env.output_dir }}'
        shell: bash
      - name: Upload assets to the GitHub release draft
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.inputs.upload_url }}
          asset_path: ${{ env.output_dir }}/*
  build-source:
    runs-on: ubuntu-latest
    name: Build source for R=release
    environment: ci_build
    steps:
      - uses: actions/checkout@v3
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
      - name: Install package dependencies
        run: |
          sudo apt-get -y update && \
             sudo apt-get -y install --no-install-recommends libcurl4-openssl-dev curl libxml2-dev  libssl-dev && \
             sudo locale-gen en_US.UTF-8 && \
             sudo update-locale LC_ALL=en_US.UTF-8 && \
             sudo apt-get -y clean && \
             sudo apt-get -y autoremove
      - name: Query r-dependencies
        run: |
          install.packages("RODBC")
          install.packages("DBI")
          install.packages("devtools", dependencies=TRUE)
          devtools::install_deps()
        shell: Rscript {0}
        env: # Set individual GH PAT
          GITHUB_PAT: ${{ secrets.PAT_FOR_DEVTOOLS }}
      - name: Create output dir
        run: |
          out_put_dir="${{ runner.temp }}/source"
          mkdir -p "${out_put_dir}"
          echo "output_dir=${out_put_dir}" >> $GITHUB_ENV
      - name: Build
        run: |
          devtools::build(binary=FALSE, path="${{ env.output_dir }}")
        shell: Rscript {0}
        env: # Set individual GH PAT
          GITHUB_PAT: ${{ secrets.PAT_FOR_DEVTOOLS }}
      - name: Generate sha256sum files
        run: find "${{ env.output_dir }}" -maxdepth 1 -type f -exec bash -c 'sha256sum {} > {}.sha256' \;
        shell: bash
      - name: Check result
        run: |
           echo "Target folder is ${{ env.output_dir }}"
           ls -la "${{ env.output_dir }}"
      - name: Upload assets to the GitHub release draft
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.inputs.upload_url }}
          asset_path: ${{ env.output_dir }}/*